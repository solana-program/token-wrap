/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { TOKEN_WRAP_PROGRAM_ADDRESS } from '../programs';

export const TOKEN_WRAP_ERROR__WRAPPED_MINT_MISMATCH = 0x0; // 0

export const TOKEN_WRAP_ERROR__BACKPOINTER_MISMATCH = 0x1; // 1

export const TOKEN_WRAP_ERROR__ZERO_WRAP_AMOUNT = 0x2; // 2

export const TOKEN_WRAP_ERROR__MINT_AUTHORITY_MISMATCH = 0x3; // 3

export const TOKEN_WRAP_ERROR__ESCROW_OWNER_MISMATCH = 0x4; // 4

export const TOKEN_WRAP_ERROR__INVALID_WRAPPED_MINT_OWNER = 0x5; // 5

export const TOKEN_WRAP_ERROR__INVALID_BACKPOINTER_OWNER = 0x6; // 6

export type TokenWrapError =
  | typeof TOKEN_WRAP_ERROR__BACKPOINTER_MISMATCH
  | typeof TOKEN_WRAP_ERROR__ESCROW_OWNER_MISMATCH
  | typeof TOKEN_WRAP_ERROR__INVALID_BACKPOINTER_OWNER
  | typeof TOKEN_WRAP_ERROR__INVALID_WRAPPED_MINT_OWNER
  | typeof TOKEN_WRAP_ERROR__MINT_AUTHORITY_MISMATCH
  | typeof TOKEN_WRAP_ERROR__WRAPPED_MINT_MISMATCH
  | typeof TOKEN_WRAP_ERROR__ZERO_WRAP_AMOUNT;

let tokenWrapErrorMessages: Record<TokenWrapError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  tokenWrapErrorMessages = {
    [TOKEN_WRAP_ERROR__BACKPOINTER_MISMATCH]: `Wrapped backpointer account address does not match expected PDA`,
    [TOKEN_WRAP_ERROR__ESCROW_OWNER_MISMATCH]: `Unwrapped escrow token owner is not set to expected PDA`,
    [TOKEN_WRAP_ERROR__INVALID_BACKPOINTER_OWNER]: `Wrapped backpointer account owner is not the expected token wrap program`,
    [TOKEN_WRAP_ERROR__INVALID_WRAPPED_MINT_OWNER]: `Wrapped mint account owner is not the expected token program`,
    [TOKEN_WRAP_ERROR__MINT_AUTHORITY_MISMATCH]: `Wrapped mint authority does not match expected PDA`,
    [TOKEN_WRAP_ERROR__WRAPPED_MINT_MISMATCH]: `Wrapped mint account address does not match expected PDA`,
    [TOKEN_WRAP_ERROR__ZERO_WRAP_AMOUNT]: `Wrap amount should be positive`,
  };
}

export function getTokenWrapErrorMessage(code: TokenWrapError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (tokenWrapErrorMessages as Record<TokenWrapError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isTokenWrapError<TProgramErrorCode extends TokenWrapError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    TOKEN_WRAP_PROGRAM_ADDRESS,
    code
  );
}
