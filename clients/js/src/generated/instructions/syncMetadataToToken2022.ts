/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { TOKEN_WRAP_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SYNC_METADATA_TO_TOKEN2022_DISCRIMINATOR = 4;

export function getSyncMetadataToToken2022DiscriminatorBytes() {
  return getU8Encoder().encode(SYNC_METADATA_TO_TOKEN2022_DISCRIMINATOR);
}

export type SyncMetadataToToken2022Instruction<
  TProgram extends string = typeof TOKEN_WRAP_PROGRAM_ADDRESS,
  TAccountWrappedMint extends string | AccountMeta<string> = string,
  TAccountWrappedMintAuthority extends string | AccountMeta<string> = string,
  TAccountUnwrappedMint extends string | AccountMeta<string> = string,
  TAccountToken2022Program extends
    | string
    | AccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountSourceMetadata extends string | AccountMeta<string> = string,
  TAccountOwnerProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountWrappedMint extends string
        ? WritableAccount<TAccountWrappedMint>
        : TAccountWrappedMint,
      TAccountWrappedMintAuthority extends string
        ? ReadonlyAccount<TAccountWrappedMintAuthority>
        : TAccountWrappedMintAuthority,
      TAccountUnwrappedMint extends string
        ? ReadonlyAccount<TAccountUnwrappedMint>
        : TAccountUnwrappedMint,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      TAccountSourceMetadata extends string
        ? ReadonlyAccount<TAccountSourceMetadata>
        : TAccountSourceMetadata,
      TAccountOwnerProgram extends string
        ? ReadonlyAccount<TAccountOwnerProgram>
        : TAccountOwnerProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SyncMetadataToToken2022InstructionData = { discriminator: number };

export type SyncMetadataToToken2022InstructionDataArgs = {};

export function getSyncMetadataToToken2022InstructionDataEncoder(): FixedSizeEncoder<SyncMetadataToToken2022InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: SYNC_METADATA_TO_TOKEN2022_DISCRIMINATOR,
    })
  );
}

export function getSyncMetadataToToken2022InstructionDataDecoder(): FixedSizeDecoder<SyncMetadataToToken2022InstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getSyncMetadataToToken2022InstructionDataCodec(): FixedSizeCodec<
  SyncMetadataToToken2022InstructionDataArgs,
  SyncMetadataToToken2022InstructionData
> {
  return combineCodec(
    getSyncMetadataToToken2022InstructionDataEncoder(),
    getSyncMetadataToToken2022InstructionDataDecoder()
  );
}

export type SyncMetadataToToken2022Input<
  TAccountWrappedMint extends string = string,
  TAccountWrappedMintAuthority extends string = string,
  TAccountUnwrappedMint extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountSourceMetadata extends string = string,
  TAccountOwnerProgram extends string = string,
> = {
  /** Wrapped mint */
  wrappedMint: Address<TAccountWrappedMint>;
  /** Wrapped mint authority PDA */
  wrappedMintAuthority: Address<TAccountWrappedMintAuthority>;
  /** Unwrapped mint */
  unwrappedMint: Address<TAccountUnwrappedMint>;
  /** Token-2022 program */
  token2022Program?: Address<TAccountToken2022Program>;
  /**
   * Source metadata account. Required if metadata pointer
   * indicates external account.
   */
  sourceMetadata?: Address<TAccountSourceMetadata>;
  /**
   * Owner program. Required when metadata account is
   * owned by a third-party program.
   */
  ownerProgram?: Address<TAccountOwnerProgram>;
};

export function getSyncMetadataToToken2022Instruction<
  TAccountWrappedMint extends string,
  TAccountWrappedMintAuthority extends string,
  TAccountUnwrappedMint extends string,
  TAccountToken2022Program extends string,
  TAccountSourceMetadata extends string,
  TAccountOwnerProgram extends string,
  TProgramAddress extends Address = typeof TOKEN_WRAP_PROGRAM_ADDRESS,
>(
  input: SyncMetadataToToken2022Input<
    TAccountWrappedMint,
    TAccountWrappedMintAuthority,
    TAccountUnwrappedMint,
    TAccountToken2022Program,
    TAccountSourceMetadata,
    TAccountOwnerProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SyncMetadataToToken2022Instruction<
  TProgramAddress,
  TAccountWrappedMint,
  TAccountWrappedMintAuthority,
  TAccountUnwrappedMint,
  TAccountToken2022Program,
  TAccountSourceMetadata,
  TAccountOwnerProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKEN_WRAP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    wrappedMint: { value: input.wrappedMint ?? null, isWritable: true },
    wrappedMintAuthority: {
      value: input.wrappedMintAuthority ?? null,
      isWritable: false,
    },
    unwrappedMint: { value: input.unwrappedMint ?? null, isWritable: false },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    sourceMetadata: { value: input.sourceMetadata ?? null, isWritable: false },
    ownerProgram: { value: input.ownerProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.token2022Program.value) {
    accounts.token2022Program.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.wrappedMint),
      getAccountMeta(accounts.wrappedMintAuthority),
      getAccountMeta(accounts.unwrappedMint),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.sourceMetadata),
      getAccountMeta(accounts.ownerProgram),
    ],
    programAddress,
    data: getSyncMetadataToToken2022InstructionDataEncoder().encode({}),
  } as SyncMetadataToToken2022Instruction<
    TProgramAddress,
    TAccountWrappedMint,
    TAccountWrappedMintAuthority,
    TAccountUnwrappedMint,
    TAccountToken2022Program,
    TAccountSourceMetadata,
    TAccountOwnerProgram
  >;

  return instruction;
}

export type ParsedSyncMetadataToToken2022Instruction<
  TProgram extends string = typeof TOKEN_WRAP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Wrapped mint */
    wrappedMint: TAccountMetas[0];
    /** Wrapped mint authority PDA */
    wrappedMintAuthority: TAccountMetas[1];
    /** Unwrapped mint */
    unwrappedMint: TAccountMetas[2];
    /** Token-2022 program */
    token2022Program: TAccountMetas[3];
    /**
     * Source metadata account. Required if metadata pointer
     * indicates external account.
     */

    sourceMetadata?: TAccountMetas[4] | undefined;
    /**
     * Owner program. Required when metadata account is
     * owned by a third-party program.
     */

    ownerProgram?: TAccountMetas[5] | undefined;
  };
  data: SyncMetadataToToken2022InstructionData;
};

export function parseSyncMetadataToToken2022Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSyncMetadataToToken2022Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === TOKEN_WRAP_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      wrappedMint: getNextAccount(),
      wrappedMintAuthority: getNextAccount(),
      unwrappedMint: getNextAccount(),
      token2022Program: getNextAccount(),
      sourceMetadata: getNextOptionalAccount(),
      ownerProgram: getNextOptionalAccount(),
    },
    data: getSyncMetadataToToken2022InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
